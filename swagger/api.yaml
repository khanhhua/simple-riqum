swagger: '2.0'
info:
  description: Documentation for interacting with Simple Riqum via RESTful/HTTP
  version: 1.0.0
  title: Simple Riqum
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: giakhanh2487@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8080'
basePath: /api/v1
tags:
  - name: auth
    description: Authorization
  - name: user
    description: Everything about your Users
  - name: resource
    description: Everything about your Resources
  - name: quota
    description: Everything about your Quota
schemes:
  - https
  - http
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user
      description: ''
      operationId: login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Login credential
          required: true
          schema:
            $ref: '#/definitions/BasicCredential'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: invalid login request
          schema:
            $ref: '#/definitions/ApiResponse'

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout a user
      description: ''
      operationId: logout
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        default:
          description: successful operation
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
    get:
      tags:
        - user
      summary: Get one or more users
      description: ''
      operationId: findUsers
      produces:
        - application/json
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          description: successful operation
  '/user/{userID}':
    get:
      tags:
        - user
      summary: Get one user identified by userID
      description: ''
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid tag value
    put:
      tags:
        - user
      summary: Update one user identified by userID
      description: ''
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: userID
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input values
  /resource:
    post:
      tags:
        - resource
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Resource'
        '400':
          description: Invalid input values
    get:
      tags:
        - resource
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
        '400':
          description: Invalid input values
  '/resource/{resourceId}':
    get:
      tags:
        - resource
      parameters:
        - in: path
          name: resourceId
          type: string
          required: true
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Resource'
        '400':
          description: Invalid input resourceId
    put:
      tags:
        - resource
      parameters:
        - in: path
          name: resourceId
          type: string
          required: true
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Resource'
        '400':
          description: Invalid input resourceId
    delete:
      tags:
        - resource
      parameters:
        - in: path
          name: resourceId
          type: string
          required: true
      responses:
        '204':
          description: empty content
        '400':
          description: Invalid resourceId
      
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://riqum.khanhhua.com/oauth/authorize'
    tokenUrl: 'https://riqum.khanhhua.com/oauth/token'
    scopes:
      user: Grants read/write to his own resources
      admin: >-
        Grants read and write access to administrative information (user, grant
        to users)
definitions:
  BasicCredential:
    type: object
    required:
      - email
      - password
    properties:
      username:
        type: string
      password:
        type: string
  User:
    type: object
    required:
      - id
      - username
      - email
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int64
        description: User Status
      roles:
        type: array
        items:
          type: string
      quota:
        type: object
        properties:
          limit:
            type: integer
          usage:
            type: integer
          unit:
            type: string
    xml:
      name: User
  Resource:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
      name:
        type: string
      quota:
        type: object
        properties:
          limit:
            type: integer
          usage:
            type: integer
          unit:
            type: string
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category

  LoginResponse:
    type: object
    properties:
      accessToken:
        type: string

  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      type:
        type: string
      message:
        type: string
      errors:
        type: array
        items:
          type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
